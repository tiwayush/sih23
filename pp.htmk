<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Add Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    
    <!-- Add Google Fonts link for Poppins -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS for navbar and links -->
    <style>
        .navbar-light-blue {
            background-color: #add8e6; /* Light blue background color */
        }

        .nav-item a {
            font-weight: 700 !important; /* Bold font weight */
            font-family: 'Poppins', sans-serif !important; /* Poppins font family */
            font-size: larger !important; /* Larger font size */
        }

        .navbar-brand {
            font-family: 'Poppins', sans-serif !important; /* Apply Poppins font */
            font-weight: 700 !important; /* Bold font weight */
            font-size: 24px !important; /* Increase font size to 24px */
        }

        /* Add background blur to the body */
        body {
            background-image: linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)), /* Add a semi-transparent white background */
                              linear-gradient(90deg, #add8e6 50%, #fff 50%); /* Light blue gradient background */
            background-size: 200% 100%; /* Adjust the background size as needed */
            backdrop-filter: blur(70px); /* Apply a blur effect with a radius of 70px */
        }
    </style>
    
    <title>Well It!</title>
</head>
<body>
    <!-- Add a navbar with links and apply custom class -->
    <nav class="navbar navbar-expand-lg navbar-light navbar-light-blue">
        <div class="container">
            <a class="navbar-brand ml-auto" href="#">Well It!</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="#">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Community</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">FAQ</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5 text-center">
        <div class="row pt-5">
            <div class="col-sm text-center pt-5">
                <h1 class="display-3" id="typed-output"></h1>
            </div>
        </div>

        <!-- Added 4 lines with typewriter animation -->
        <div class="row pt-3">
            <div class="col-sm text-center">
                <p id="line1"></p>
                <p id="line2"></p>
                <p id="line3"></p>
                <p id="line4"></p>
            </div>
        </div>

        <!-- Hidden state for drop-down and other elements -->
        <form style="display: none;">
            <div class="row pt-3">
                <div class="col-sm text-center">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu1" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            State
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu1">
                            <a class="dropdown-item" href="#">Tamil Nadu</a>
                        </div>
                    </div>
                </div>
                <div class="col-sm text-center">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            District 
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                            <a class="dropdown-item" href="#">Ullu</a>
                            <a class="dropdown-item" href="#">Ullu Tullu</a>
                            <a class="dropdown-item" href="#">Kullu</a>
                        </div>
                    </div>
                </div>
                <div class="col-sm text-center">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu3" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Region
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                        
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add a "Get Location" button -->
            <div class="row pt-3">
                <div class="col-sm text-center">
                    <button type="button" class="btn btn-primary" id="getLocationButton">Get Location</button>
                </div>
            </div>
            
            <!-- Add a line with "OR" text -->
            <div class="row pt-4">
                <div class="col-sm text-center">
                    <hr style="border-top: 1px solid #6c757d; width: 50%; margin-top: 10px;">
                    <strong style="font-size: 20px; margin: 0 10px;">OR</strong>
                    <hr style="border-top: 1px solid #6c757d; width: 50%; margin-top: 10px;">
                </div>
            </div>

            <!-- Add text "To Fetch Your Location Automatically" -->
            <div class="row pt-3">
                <div class="col-sm text-center">
                    <p>To Fetch Your Location Automatically</p>
                </div>
            </div>

            <!-- Shift the "Get Location" button below the text -->
            <div class="row pt-3">
                <div class="col-sm text-center">
                    <button type="button" class="btn btn-primary" id="getLocationButton">Get Location</button>
                </div>
            </div>
        </form>
    </div>

    <!-- Add Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

    <!-- Include Typed.js -->
    <script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.12"></script>

    <!-- JavaScript for Geolocation and Reverse Geocoding using OpenCage API -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const textToType = "Welcome To Well It!";
            const typed = new Typed("#typed-output", {
                strings: [textToType],
                typeSpeed: 80, 
                startDelay: 500, 
                showCursor: false, // Hide cursor immediately
                onComplete: function () {
                    // Show the hidden elements after the animation completes
                    document.querySelector('form').style.display = 'block';
                }
            });

            // Delayed typing for the additional lines
            setTimeout(function() {
                const lines = [
                    "I am Ayush Tiwari",
                    "Hello",
                    "Hahah",
                    "Meow Meow",
                ];

                const lineElements = [
                    document.getElementById("line1"),
                    document.getElementById("line2"),
                    document.getElementById("line3"),
                    document.getElementById("line4"),
                ];

                let currentIndex = 0;

                const typeNextLine = () => {
                    if (currentIndex < lines.length) {
                        const typedLine = new Typed(lineElements[currentIndex], {
                            strings: [lines[currentIndex]],
                            typeSpeed: 60, // Faster typing speed
                            startDelay: 0,
                            showCursor: false, // Hide cursor for additional lines
                            onComplete: function () {
                                currentIndex++;
                                typeNextLine(); // Type the next line
                            }
                        });
                    } else {
                        // Show the hidden elements after all lines are loaded
                        document.querySelector('form').style.display = 'block';
                    }
                };

                typeNextLine(); // Start typing the first line
            }, 1000); // Delay showing additional lines by 1 second

            document.getElementById("getLocationButton").addEventListener("click", function () {
                if ("geolocation" in navigator) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        const latitude = position.coords.latitude;
                        const longitude = position.coords.longitude;

                        // Replace 'YOUR_API_KEY' with your actual OpenCage Geocoding API key
                        const apiKey = 'YOUR_API_KEY';

                        // Perform reverse geocoding using OpenCage API
                        fetch(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}`)
                            .then(response => response.json())
                            .then(data => {
                                const locationData = data.results[0];

                                // Check if city component exists in the response
                                if (locationData.components && locationData.components.city) {
                                    const city = locationData.components.city;
                                    const country = locationData.components.country;

                                    alert(`City: ${city}, Country: ${country}`);
                                } else {
                                    const formattedLocation = locationData.formatted || "Location information not available.";
                                    alert(`Location: ${formattedLocation}`);
                                }
                            })
                            .catch(error => {
                                console.error("Error performing reverse geocoding:", error);
                                alert("Error getting location details. Please check the console for more information.");
                            });
                    }, function (error) {
                        console.error("Error getting location:", error);
                        alert("Error getting location. Please check your browser settings.");
                    });
                } else {
                    console.log("Geolocation is not available in this browser.");
                    alert("Geolocation is not available in this browser.");
                }
            });
        });
    </script>
</body>
</html>
